package org.sluckframework.cqrs.unitofwork;

import org.sluckframework.cqrs.eventhanding.EventBus;
import org.sluckframework.domain.aggregate.AggregateRoot;
import org.sluckframework.domain.event.EventProxy;

/**
 * 工作单元， 保证 一次命令操作的 原子性
 * 
 * @author sunxy
 * @time 2015年8月30日 下午10:35:54
 * @since 1.0
 */
public interface UnitOfWork {
	
	/**
	 * 提交工作单元， 所有 聚合注册的事件 将被发布 存储 ， 并清空所有资源
     *
     */
    void commit();

    /**
     * 回滚
     */
    void rollback();

    /**
     * 回滚 ，并将 造成回滚的异常带入
     *
     * @param cause The cause of the rollback. May be <code>null</code>.
     */
    void rollback(Throwable cause);

    /**
     * 表明工作单元的开始
     */
    void start();

    /**
     * 判断工作单元是否开始
     *
     * @return <code>true</code> if this UnitOfWork is started, <code>false</code> otherwise.
     */
    boolean isStarted();

    /**
     * 表明工作单元是否具有事务性
     *
     * @return <code>true</code> if this unit of work is bound to a transaction, otherwise <code>false</code>
     */
    boolean isTransactional();

    /**
     * 注册监听器
     *
     * @param listener The listener to notify when the UnitOfWork's state changes.
     */
    void registerListener(UnitOfWorkListener listener);

    /**
     * 注册聚合 到 uow中， 注册的聚合将 被 保存 
     *
     * @param aggregateRoot         The aggregate root to register in the UnitOfWork
     * @param eventBus              The event bus on which Events generated by this aggregate must be published
     * @param saveAggregateCallback The callback that is invoked when the UnitOfWork wants to store the registered
     *                              aggregate
     * @return The actual aggregate instance to use
     */
    @SuppressWarnings("rawtypes")
	<T extends AggregateRoot> T registerAggregate(T aggregateRoot, EventBus eventBus,
                                                  SaveAggregateCallback<T> saveAggregateCallback);

    /**
     * 发布事件
     * 
     * @param event    The event to be published on the event bus
     * @param eventBus The event bus on which to publish the event
     */
    void publishEvent(EventProxy<?> event, EventBus eventBus);

    /**
     * 给 UOW 增加资源， 不能让内嵌的 uow 使用
     * 
     * @param name     The name under which to attach the resource
     * @param resource The resource to attach
     */
    void attachResource(String name, Object resource);

    /**
     * 给 UOW 增加资源， 并指定能否让内嵌的 uow 使用
     *
     * @param name     The name under which to attach the resource
     * @param resource The resource to attach
     * @param inherited Whether or not the resource may be inherited by a nested Unit of Work
     */
    void attachResource(String name, Object resource, boolean inherited);

    /**
     * 获取 attach 的资源
     *
     * @param name The name under which the resource was attached
     * @return if dont have return null
     */
    <T> T getResource(String name);

    /**
     * 将所有资源 attach给指定的 uow
     * 
     * @param inheritingUnitOfWork the uow
     */
    void attachInheritedResources(UnitOfWork inheritingUnitOfWork);

}
